/*
* Copyright 2012 Acuminous Ltd
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* Absolutely gutted to find out that gradle had adopted the dependsOn model used by ant,
* which prevents tasks being ATOMIC. See http://issues.gradle.org/browse/GRADLE-427
* Also there's no good way of executing dependedOn tasks in a defined order. Sigh.
* Enthusiasm for gradle <= 0. Just using it for compilation.
*/

apply plugin: 'java'

repositories {
	mavenCentral()
}

dependencies {
    compile fileTree(dir: 'lib', includes: ['*.jar']) 
}

sourceSets {
	main {
		java {
			srcDir 'src/java'
		}
	}
}

// Usage gradle executable -Pwar=<path-to-war>
task executable(dependsOn: [':clean', ':compileJava']) << {
	
	File file = new File(war)
	if (!file.exists()) {
		ant.fail(message: "${war} does not exist")
	}
	
	String warFile = file.name
	if (!warFile.endsWith('\\.war')) {
		ant.fail(message: "${war} does not appear to be a war file")
	}
	
	ant.echo('Copying war')
	ant.copy(file: war, todir: 'build/war', failonerror: true)

	ant.echo('Updating manifest')
	ant.unwar(src: "build/war/${warFile}", dest: 'build/war') {
		patternset {
			include(name: 'META-INF/MANIFEST.MF')
		}
	}
	
	ant.manifest(file: 'build/war/META-INF/MANIFEST.MF') {
		attribute(name: 'Main-Class', value: 'uk.co.acuminous.warexec.EmbeddedJettyServer')
	}
	
	ant.echo('Unpacking jetty dependencies')
	ant.unjar(dest:'build/classes/main') {
		fileset(dir:'lib')
		patternset {
			exclude(name:'META-INF/**')
		}
	}
	
	ant.echo('Updating war')
	ant.war(destfile: "build/war/${warFile}", manifest:'build/war/META-INF/MANIFEST.MF', update:true) {
		fileset(dir:'build/classes/main')
	}
	
	ant.echo('Done')
}